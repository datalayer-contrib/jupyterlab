diff --git a/packages/docmanager/src/manager.ts b/packages/docmanager/src/manager.ts
diff --git a/packages/docregistry/src/context.ts b/packages/docregistry/src/context.ts
diff --git a/packages/docregistry/src/default.ts b/packages/docregistry/src/default.ts
diff --git a/packages/docregistry/src/registry.ts b/packages/docregistry/src/registry.ts
diff --git a/packages/notebook/src/celllist.ts b/packages/notebook/src/celllist.ts
diff --git a/packages/notebook/src/model.ts b/packages/notebook/src/model.ts
diff --git a/packages/notebook/src/modelfactory.ts b/packages/notebook/src/modelfactory.ts
diff --git a/packages/notebook/src/widget.ts b/packages/notebook/src/widget.ts
diff --git a/packages/observables/src/modeldb.ts b/packages/observables/src/modeldb.ts

index 2593339fe7f..e026d2f1594 100644
--- a/packages/observables/src/modeldb.ts
+++ b/packages/observables/src/modeldb.ts
@@ -3,9 +3,11 @@
 
 import { IDisposable, DisposableSet } from '@phosphor/disposable';
 
+import { Schema } from '@phosphor/datastore';
+
 import { ISignal, Signal } from '@phosphor/signaling';
 
-import { JSONExt, JSONValue, JSONObject } from '@phosphor/coreutils';
+import { JSONExt, JSONObject, ReadonlyJSONValue } from '@phosphor/coreutils';
 
 import { ObservableMap } from './observablemap';
 
@@ -49,17 +51,37 @@ export interface IObservableValue extends IObservable {
   /**
    * The changed signal.
    */
-  readonly changed: ISignal<IObservableValue, ObservableValue.IChangedArgs>;
+  readonly changed: ISignal<IObservableValue, IObservableValue.IChangedArgs>;
 
   /**
    * Get the current value, or `undefined` if it has not been set.
    */
-  get(): JSONValue | undefined;
+  get(): ReadonlyJSONValue | undefined;
 
   /**
    * Set the value.
    */
-  set(value: JSONValue): void;
+  set(value: ReadonlyJSONValue): void;
+}
+
+/**
+ * The namespace for the `ObservableValue` class statics.
+ */
+export namespace IObservableValue {
+  /**
+   * The changed args object emitted by the `IObservableValue`.
+   */
+  export class IChangedArgs {
+    /**
+     * The old value.
+     */
+    oldValue: ReadonlyJSONValue | undefined;
+
+    /**
+     * The new value.
+     */
+    newValue: ReadonlyJSONValue | undefined;
+  }
 }
 
 /**
@@ -188,7 +210,9 @@ export interface IModelDB extends IDisposable {
    * The list can only store objects that are simple
    * JSON Objects and primitives.
    */
-  createList<T extends JSONValue>(path: string): IObservableUndoableList<T>;
+  createList<T extends ReadonlyJSONValue>(
+    path: string
+  ): IObservableUndoableList<T>;
 
   /**
    * Create a map and insert it in the database.
@@ -218,7 +242,7 @@ export interface IModelDB extends IDisposable {
    *
    * @param path: the path for the value.
    */
-  getValue(path: string): JSONValue | undefined;
+  getValue(path: string): ReadonlyJSONValue | undefined;
 
   /**
    * Set a value at a path. That value must already have
@@ -228,7 +252,7 @@ export interface IModelDB extends IDisposable {
    *
    * @param value: the new value.
    */
-  setValue(path: string, value: JSONValue): void;
+  setValue(path: string, value: ReadonlyJSONValue): void;
 
   /**
    * Create a view onto a subtree of the model database.
@@ -240,12 +264,34 @@ export interface IModelDB extends IDisposable {
    */
   view(basePath: string): IModelDB;
 
+  /**
+   * Run a funcion where all changes become part of a transaction.
+   * @param fn: the function to run. It recevies the transaction id
+   *            as an argument.
+   */
+  withTransaction(fn: (transactionId?: string) => void): void;
+
   /**
    * Dispose of the resources held by the database.
    */
   dispose(): void;
 }
 
+/**
+ * A namespace for the `IModelDB` interface.
+ */
+export namespace IModelDB {
+  /**
+   * A factory interface for creating `IModelDB` objects.
+   */
+  export interface IFactory {
+    /**
+     * Create a new `IModelDB` instance.
+     */
+    createNew(path: string, schemas: ReadonlyArray<Schema>): IModelDB;
+  }
+}
+
 /**
  * A concrete implementation of an `IObservableValue`.
  */
@@ -255,7 +301,7 @@ export class ObservableValue implements IObservableValue {
    *
    * @param initialValue: the starting value for the `ObservableValue`.
    */
-  constructor(initialValue: JSONValue = null) {
+  constructor(initialValue: ReadonlyJSONValue = null) {
     this._value = initialValue;
   }
 
@@ -276,21 +322,21 @@ export class ObservableValue implements IObservableValue {
   /**
    * The changed signal.
    */
-  get changed(): ISignal<this, ObservableValue.IChangedArgs> {
+  get changed(): ISignal<this, IObservableValue.IChangedArgs> {
     return this._changed;
   }
 
   /**
    * Get the current value, or `undefined` if it has not been set.
    */
-  get(): JSONValue {
+  get(): ReadonlyJSONValue {
     return this._value;
   }
 
   /**
    * Set the current value.
    */
-  set(value: JSONValue): void {
+  set(value: ReadonlyJSONValue): void {
     let oldValue = this._value;
     if (JSONExt.deepEqual(oldValue, value)) {
       return;
@@ -314,31 +360,11 @@ export class ObservableValue implements IObservableValue {
     this._value = null;
   }
 
-  private _value: JSONValue = null;
-  private _changed = new Signal<this, ObservableValue.IChangedArgs>(this);
+  private _value: ReadonlyJSONValue = null;
+  private _changed = new Signal<this, IObservableValue.IChangedArgs>(this);
   private _isDisposed = false;
 }
 
-/**
- * The namespace for the `ObservableValue` class statics.
- */
-export namespace ObservableValue {
-  /**
-   * The changed args object emitted by the `IObservableValue`.
-   */
-  export class IChangedArgs {
-    /**
-     * The old value.
-     */
-    oldValue: JSONValue | undefined;
-
-    /**
-     * The new value.
-     */
-    newValue: JSONValue | undefined;
-  }
-}
-
 /**
  * A concrete implementation of an `IModelDB`.
  */
@@ -437,7 +463,9 @@ export class ModelDB implements IModelDB {
    * The list can only store objects that are simple
    * JSON Objects and primitives.
    */
-  createList<T extends JSONValue>(path: string): IObservableUndoableList<T> {
+  createList<T extends ReadonlyJSONValue>(
+    path: string
+  ): IObservableUndoableList<T> {
     let vec = new ObservableUndoableList<T>(
       new ObservableUndoableList.IdentitySerializer<T>()
     );
@@ -484,7 +512,7 @@ export class ModelDB implements IModelDB {
    *
    * @param path: the path for the value.
    */
-  getValue(path: string): JSONValue | undefined {
+  getValue(path: string): ReadonlyJSONValue | undefined {
     let val = this.get(path);
     if (!val || val.type !== 'Value') {
       throw Error('Can only call getValue for an ObservableValue');
@@ -500,7 +528,7 @@ export class ModelDB implements IModelDB {
    *
    * @param value: the new value.
    */
-  setValue(path: string, value: JSONValue): void {
+  setValue(path: string, value: ReadonlyJSONValue): void {
     let val = this.get(path);
     if (!val || val.type !== 'Value') {
       throw Error('Can only call setValue on an ObservableValue');
@@ -535,6 +563,15 @@ export class ModelDB implements IModelDB {
     this._db.set(this._resolvePath(path), value);
   }
 
+  /**
+   * Run a funcion where all changes become part of a transaction.
+   * @param fn: the function to run. It recevies the transaction id
+   *            as an argument.
+   */
+  withTransaction(fn: (transactionId?: string) => void): void {
+    fn();
+  }
+
   /**
    * Dispose of the resources held by the database.
    */
@@ -585,14 +622,4 @@ export namespace ModelDB {
      */
     baseDB?: ModelDB;
   }
-
-  /**
-   * A factory interface for creating `IModelDB` objects.
-   */
-  export interface IFactory {
-    /**
-     * Create a new `IModelDB` instance.
-     */
-    createNew(path: string): IModelDB;
-  }
 }


diff --git a/packages/observables/src/undoablelist.ts b/packages/observables/src/undoablelist.ts
index 99d3a525cf3..6346039776a 100644
--- a/packages/observables/src/undoablelist.ts
+++ b/packages/observables/src/undoablelist.ts
@@ -1,7 +1,7 @@
 // Copyright (c) Jupyter Development Team.
 // Distributed under the terms of the Modified BSD License.
 
-import { JSONValue } from '@phosphor/coreutils';
+import { ReadonlyJSONValue } from '@phosphor/coreutils';
 
 import { each } from '@phosphor/algorithm';
 
@@ -15,12 +15,12 @@ export interface ISerializer<T> {
   /**
    * Convert the object to JSON.
    */
-  toJSON(value: T): JSONValue;
+  toJSON(value: T): ReadonlyJSONValue;
 
   /**
    * Deserialize the object from JSON.
    */
-  fromJSON(value: JSONValue): T;
+  fromJSON(value: ReadonlyJSONValue): T;
 }
 
 /**
@@ -193,7 +193,9 @@ export class ObservableUndoableList<T> extends ObservableList<T>
   /**
    * Undo a change event.
    */
-  private _undoChange(change: IObservableList.IChangedArgs<JSONValue>): void {
+  private _undoChange(
+    change: IObservableList.IChangedArgs<ReadonlyJSONValue>
+  ): void {
     let index = 0;
     let serializer = this._serializer;
     switch (change.type) {
@@ -225,7 +227,9 @@ export class ObservableUndoableList<T> extends ObservableList<T>
   /**
    * Redo a change event.
    */
-  private _redoChange(change: IObservableList.IChangedArgs<JSONValue>): void {
+  private _redoChange(
+    change: IObservableList.IChangedArgs<ReadonlyJSONValue>
+  ): void {
     let index = 0;
     let serializer = this._serializer;
     switch (change.type) {
@@ -259,12 +263,12 @@ export class ObservableUndoableList<T> extends ObservableList<T>
    */
   private _copyChange(
     change: IObservableList.IChangedArgs<T>
-  ): IObservableList.IChangedArgs<JSONValue> {
-    let oldValues: JSONValue[] = [];
+  ): IObservableList.IChangedArgs<ReadonlyJSONValue> {
+    let oldValues: ReadonlyJSONValue[] = [];
     each(change.oldValues, value => {
       oldValues.push(this._serializer.toJSON(value));
     });
-    let newValues: JSONValue[] = [];
+    let newValues: ReadonlyJSONValue[] = [];
     each(change.newValues, value => {
       newValues.push(this._serializer.toJSON(value));
     });
@@ -281,7 +285,7 @@ export class ObservableUndoableList<T> extends ObservableList<T>
   private _isUndoable = true;
   private _madeCompoundChange = false;
   private _index = -1;
-  private _stack: IObservableList.IChangedArgs<JSONValue>[][] = [];
+  private _stack: IObservableList.IChangedArgs<ReadonlyJSONValue>[][] = [];
   private _serializer: ISerializer<T>;
 }
 
@@ -292,19 +296,19 @@ export namespace ObservableUndoableList {
   /**
    * A default, identity serializer.
    */
-  export class IdentitySerializer<T extends JSONValue>
+  export class IdentitySerializer<T extends ReadonlyJSONValue>
     implements ISerializer<T> {
     /**
      * Identity serialize.
      */
-    toJSON(value: T): JSONValue {
+    toJSON(value: T): ReadonlyJSONValue {
       return value;
     }
 
     /**
      * Identity deserialize.
      */
-    fromJSON(value: JSONValue): T {
+    fromJSON(value: ReadonlyJSONValue): T {
       return value as T;
     }
   }
diff --git a/packages/outputarea/src/model.ts b/packages/outputarea/src/model.ts
index 2f41453fc15..a5fb0d9c81d 100644
--- a/packages/outputarea/src/model.ts
+++ b/packages/outputarea/src/model.ts
@@ -13,7 +13,6 @@ import {
   IObservableList,
   ObservableList,
   IObservableValue,
-  ObservableValue,
   IModelDB
 } from '@jupyterlab/observables';
 
@@ -449,7 +448,7 @@ export class OutputAreaModel implements IOutputAreaModel {
    */
   private _onSerializedChanged(
     sender: IObservableValue,
-    args: ObservableValue.IChangedArgs
+    args: IObservableValue.IChangedArgs
   ) {
     if (!this._changeGuard) {
       this._changeGuard = true;
diff --git a/packages/services/src/contents/index.ts b/packages/services/src/contents/index.ts
index 758795ce674..7fe530efc92 100644
--- a/packages/services/src/contents/index.ts
+++ b/packages/services/src/contents/index.ts
@@ -3,8 +3,6 @@
 
 import { URLExt, PathExt } from '@jupyterlab/coreutils';
 
-import { ModelDB } from '@jupyterlab/observables';
-
 import { JSONObject } from '@phosphor/coreutils';
 
 import { each } from '@phosphor/algorithm';
@@ -242,13 +240,6 @@ export namespace Contents {
      */
     driveName(path: string): string;
 
-    /**
-     * Given a path, get a ModelDB.IFactory from the
-     * relevant backend. Returns `null` if the backend
-     * does not provide one.
-     */
-    getModelDBFactory(path: string): ModelDB.IFactory | null;
-
     /**
      * Get a file or directory.
      *
@@ -382,12 +373,6 @@ export namespace Contents {
      */
     readonly serverSettings: ServerConnection.ISettings;
 
-    /**
-     * An optional ModelDB.IFactory instance for the
-     * drive.
-     */
-    readonly modelDBFactory?: ModelDB.IFactory;
-
     /**
      * A signal emitted when a file operation takes place.
      */
@@ -576,16 +561,6 @@ export class ContentsManager implements Contents.IManager {
     );
   }
 
-  /**
-   * Given a path, get a ModelDB.IFactory from the
-   * relevant backend. Returns `null` if the backend
-   * does not provide one.
-   */
-  getModelDBFactory(path: string): ModelDB.IFactory | null {
-    let [drive] = this._driveForPath(path);
-    return (drive && drive.modelDBFactory) || null;
-  }
-
